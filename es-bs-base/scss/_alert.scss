@use "functions";
@use "mixins/alert";
@use "mixins/border-radius";
@use "variables";

.alert {
  position: relative;
  padding: variables.$alert-padding-y variables.$alert-padding-x;
  margin-bottom: variables.$alert-margin-bottom;
  border: variables.$alert-border-width solid transparent;
  @include border-radius.border-radius(variables.$alert-border-radius);
}

// Headings for larger alerts
.alert-heading {
  // Specified to prevent conflicts of changing $headings-color
  color: inherit;
}

// Provide class for links that match alerts
.alert-link {
  font-weight: variables.$alert-link-font-weight;
}


// Dismissible alerts
//
// Expand the right padding and account for the close button's positioning.

.alert-dismissible {
  padding-right: variables.$close-font-size + variables.$alert-padding-x * 2;

  // Adjust close link position
  .close {
    position: absolute;
    top: 0;
    right: 0;
    z-index: 2;
    padding: variables.$alert-padding-y variables.$alert-padding-x;
    color: inherit;
  }
}


// Alternate styles
//
// Generate contextual modifier classes for colorizing the alert.

@each $color, $value in variables.$theme-colors {
  .alert-#{$color} {
    @include alert.alert-variant(
      functions.theme-color-level-new(
        variables.$theme-colors,
        variables.$black,
        variables.$white,
        variables.$theme-color-interval,
        $color, variables.$alert-bg-level),
      functions.theme-color-level-new(
        variables.$theme-colors,
        variables.$black,
        variables.$white,
        variables.$theme-color-interval,
        $color, variables.$alert-border-level),
      functions.theme-color-level-new(
        variables.$theme-colors,
        variables.$black,
        variables.$white,
        variables.$theme-color-interval,
        $color, variables.$alert-color-level)
    );
  }
}

.icon-wrapper {
  position: relative;
  display: flex;
  z-index: 1;
  width: 40px;
  height:40px;
  align-items: center;
  justify-content: center;
  &:before,
  &:after {
    width: 32px;
    height: 32px;
    content: '';
    position: absolute;
    border-radius: 50%;
  }
  &:after {
    width: 24px;
    height: 24px;
    z-index: 2;
  }
}

.variant-danger {
     .icon-wrapper {
        &:after {
            box-shadow: 0 0 0 3px variables.$error-50,
                0 0 0 2px variables.$error-500 inset;
        }
    }
}

.variant-success {
    .icon-wrapper {
        &:after {
            box-shadow: 0 0 0 3px variables.$success-50,
                0 0 0 2px variables.$success-500 inset;
        }
    }
}

.variant-primary {
    .icon-wrapper {
        &:after {
            box-shadow: 0 0 0 3px variables.$blue-50,
                0 0 0 2px variables.$blue-200 inset;
        }
    }
}

@each $color, $value in variables.$theme-colors {
  .icon-color-#{$color} {
    color: $value;
  }
}
